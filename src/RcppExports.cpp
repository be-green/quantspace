// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// update_huber_grad
void update_huber_grad(arma::mat& X_t, arma::vec& res, arma::vec& derivs, arma::vec& grad, double tau, double mu, int n, double one_over_n);
RcppExport SEXP _quantspace_update_huber_grad(SEXP X_tSEXP, SEXP resSEXP, SEXP derivsSEXP, SEXP gradSEXP, SEXP tauSEXP, SEXP muSEXP, SEXP nSEXP, SEXP one_over_nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X_t(X_tSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type res(resSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type derivs(derivsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type one_over_n(one_over_nSEXP);
    update_huber_grad(X_t, res, derivs, grad, tau, mu, n, one_over_n);
    return R_NilValue;
END_RCPP
}
// z_score
void z_score(arma::mat& X, const arma::rowvec& mx, const arma::vec& sx, const int p);
RcppExport SEXP _quantspace_z_score(SEXP XSEXP, SEXP mxSEXP, SEXP sxSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type mx(mxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sx(sxSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    z_score(X, mx, sx, p);
    return R_NilValue;
END_RCPP
}
// huber_grad_descent
arma::vec huber_grad_descent(arma::mat& X, arma::vec& y, double tau, arma::colvec& init_beta, double mu, int maxiter, double beta_tol, double check_tol, int intercept);
RcppExport SEXP _quantspace_huber_grad_descent(SEXP XSEXP, SEXP ySEXP, SEXP tauSEXP, SEXP init_betaSEXP, SEXP muSEXP, SEXP maxiterSEXP, SEXP beta_tolSEXP, SEXP check_tolSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type init_beta(init_betaSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type beta_tol(beta_tolSEXP);
    Rcpp::traits::input_parameter< double >::type check_tol(check_tolSEXP);
    Rcpp::traits::input_parameter< int >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(huber_grad_descent(X, y, tau, init_beta, mu, maxiter, beta_tol, check_tol, intercept));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_quantspace_update_huber_grad", (DL_FUNC) &_quantspace_update_huber_grad, 8},
    {"_quantspace_z_score", (DL_FUNC) &_quantspace_z_score, 4},
    {"_quantspace_huber_grad_descent", (DL_FUNC) &_quantspace_huber_grad_descent, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_quantspace(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
